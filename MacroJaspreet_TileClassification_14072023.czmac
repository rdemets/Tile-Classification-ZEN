<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text>#######################################################
## IMAGE CLASSIFICATION WITH TILE EXPORT
##
## Macro name: Export tiles with main class csv file
##
## Required files: None
## Required demo files: None
##
## Required module/licence: i.a. licence for image analysis
##
## DESCRIPTION: Batch process files with image analysis and extract the region and regions tables.
## 
## Copyright © 2022 by Carl Zeiss Microscopy GmbH.
## Permission is granted to use, modify and distribute this code,
## as long as this copyright notice remains part of the code.
#######################################################

# clear output
Zen.Application.MacroEditor.ClearMessages()
import csv
import io
from System.IO import File
from System.IO import Directory, SearchOption, FileInfo, Path



## Open file to analyse
# If not file open, load one
if Zen.Application.Documents.Count == 0:
    root = Zen.Application.Environment.GetFolderPath(ZenSpecialFolder.Images)
    imgFileName = ""
    
    if (not File.Exists(imgFileName)) :
        #print "the file " + imgFileName + " does not exist"
        image1 = Zen.Application.LoadImage(imgFileName, True)
        if (not image1) :
            print"the user cancelled the interactive load command"
        else :
            Zen.Application.Documents.Add(image1)
            #print "image " + image1.FileName + " loaded as image2"
    else :
        image1 = Zen.Application.LoadImage(imgFileName, False)
        Zen.Application.Documents.Add(image1)
        print "image " + image1.FileName + " loaded as image1"
# If file already open, get the active image
else:
    image1 = Zen.Application.Documents.ActiveDocument
    
    
    




## Read Metadata
NofZ = int(image1.Metadata.ZStackCount)
NofCh = image1.Metadata.ChannelCount

# Duplicate mid plane of the last channel
#MidPlanBF = Zen.Processing.Utilities.CreateSubset(image1, "C("+NofCh+")|Z("+str(round(int(NofZ)/2))+")", True, False)
#MidPlanBF = Zen.Processing.Utilities.CreateSubset(image1, "Z("+str(round(int(NofZ)/2))+")", True, False)
StackTemp = Zen.Processing.Utilities.CreateSubset(image1, "C(1)", True, False)
MaxProjGFP = Zen.Processing.Transformation.Geometric.OrthoView(StackTemp, ZenViewDirection.Frontal, 0,NofZ, ZenProjectionMethod.Maximum, True, False)


print "Max project channel 1 at plane 1 to "+str(NofZ)
Zen.Application.Documents.Add(MaxProjGFP)

print MaxProjGFP.Metadata.TilesCount +" tiles"

ShadingCorrected = Zen.Processing.Adjust.ShadingCorrection(MaxProjGFP, None, ZenTilesShadingModeType.Camera, ZenShadingCorrectionMode.Additive, 0, True, False)
Zen.Application.Documents.Add(ShadingCorrected)

## Prompt for manual exporting of the tiles
Zen.Application.Pause('Please use Image Export to export both the single slice and the full stack as individual stack\n File Type:TIFF\n Compression: None\n Tick Original Data\n Untick 8bit\n Untich short FormatUntick 8bit\n Define Subset and Export Selected TileUntick 8bit\n Then press Continue!')



## Create dialog for Image Analysis
# Get the image analysis profiles
def getshortfiles(filelist):
    files_short = []
    for short in filelist:
        files_short.append(Path.GetFileName(short))

    return files_short

docfolder = Zen.Application.Environment.GetFolderPath(ZenSpecialFolder.UserDocuments)
PSMIP = Directory.GetFiles(Path.Combine(docfolder, 'Image Analysis Settings'), '*.czias')
PSMIP_short = getshortfiles(PSMIP)


window = ZenWindow()
window.Title = 'select Image Analysis Setting         '
window.AddFolderBrowser('sourcefolder', 'Source Folder with BF tiles only', str(ZenSpecialFolder.UserData))
window.AddDropDown('IAset','select setting',PSMIP_short,0)
result=window.Show()


# get files from selected directory(ies)
path = result.GetValue('sourcefolder')
option = SearchOption.TopDirectoryOnly
files = Directory.GetFiles(path, '*.tif', option)



## Perform segmentation 
# get name of the IA settings to apply
IAset = result.GetValue('IAset')

# exit macro if no setting exist
if IAset == 0:
    strMessage = 'no setting exist !\nRestart macro and create a setting!'
    sys.exit(strMessage)


setting = ZenImageAnalysisSetting()
setting.Load(IAset)
#Zen.Analyzing.Analyze(MidPlanBF, setting)
#tabs = Zen.Analyzing.CreateRegionsTable(MidPlanBF)


# Run Intellesis on the tile and export max value in CSV file
def doIA(img,directory):

    
    setting = ZenImageAnalysisSetting()
    setting.Load(IAset)
    Zen.Analyzing.Analyze(img, setting)
    # Get Region table
    #tabs = Zen.Analyzing.CreateRegionTable(img) # Region for individual statistics
    tabs = Zen.Analyzing.CreateRegionsTable(img) # Regions for sum of statistics
    valueBG = tabs.GetValue(0,2)
    valueGrey = tabs.GetValue(1,2)
    valueWhite = tabs.GetValue(2,2)
    
    ImgClass = -1
    if valueBG&gt;valueGrey and valueBG&gt;valueWhite: ImgClass = 0 
    if valueGrey&gt;valueBG and valueGrey&gt;valueWhite: ImgClass = 1 
    if valueWhite&gt;valueBG and valueWhite&gt;valueGrey: ImgClass = 2 
    
    row = [img,ImgClass,valueBG,valueGrey,valueWhite]

    
    # open the csv file in the write mode
    with io.open(directory+'ClassesFile.csv', 'a', newline='') as csv_f:
        # create the csv writer
        writer = csv.writer(csv_f)
        writer.writerow(row)
        # close the file
        csv_f.close()
    
    return ImgClass


    

    



# go throught all files in list
i = 1.0

for f in files:
    fileinfo = FileInfo(f)
    ext = fileinfo.Extension
    name = fileinfo.Name
    directory = fileinfo.DirectoryName

    if i == 1:
        csv_f = io.open(directory+'ClassesFile.csv', 'w', newline='')
        # create the csv writer
        writer = csv.writer(csv_f)
        writer.writerow(["TileName", "MainClass", "%AreaBackground", "%AreaGrey", "%AreaWhite"])
        csv_f.close()

    img = Zen.Application.LoadImage(f, False)
    i = i+1
    if img is not None:
        # apply image Analysis
        ImgClass = doIA(img,directory)
        # place other processing functions here
        print '%.1f %% - Processed file %s' %(((i-1) / len(files))* 100, f) +" is class " + str(ImgClass)
    else:
        print 'Error while processing file %s' %(name)
    del img

# *************** Recorded Code Block ***************
#image1 = Zen.Application.Documents.GetByName(r"Untitled62")
#processingsetting1 = Zen.Processing.Utilities.Settings.SingleFileExportSetting(ZenExportFileType.TIFF)
#processingsetting1.Compression = ZenTiffCompression.None
#processingsetting1.ConvertTo8Bit = False
#processingsetting1.DestinationFolder = r'C:\Users\CFIM\Desktop'
#processingsetting1.SubsetString = ''
#processingsetting1.MergedChannelsImage = True
#processingsetting1.IndividualChannelsImages = False
#processingsetting1.OriginalData = True
#processingsetting1.ApplyDisplayCurveAndChannelColor = False
#processingsetting1.BurnInGraphics = True
#processingsetting1.UseChannelNames = False
#processingsetting1.Resize = 1
#processingsetting1.GenerateXMLFile = False
#processingsetting1.CreateFolder = True
#processingsetting1.Tiles = ZenTileMode.UseExistingTiles
#processingsetting1.Columns = 1
#processingsetting1.Rows = 1
#processingsetting1.Overlap = 0
#processingsetting1.GenerateZipFile = False
#processingsetting1.Prefix = r'Untitled62'
#processingsetting1.GraphicElementsZoom = 1
#Zen.Processing.Utilities.ExportSingleFile(image1, processingsetting1)

# *************** End of Code Block *****************

# *************** End of Code Block *****************
</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>197</Row>
  <Column>34</Column>
</Script>